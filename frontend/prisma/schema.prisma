generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Views {
  name  String @id
  count BigInt @default(1)
}

model Group {
  id          ParliamentaryGroup @id @unique
  name        String
  image       String?
  facebook    String?
  wikipedia   String?
  website     String?
  description String?
  twitter     String?
  members     Member[]
}

model Member {
  id            String              @id @default(cuid())
  name          String
  fullname      String?
  firstName     String?
  lastName      String?
  nameHira      String?
  firstNameHira String?
  lastNameHira  String?
  nameKana      String?
  firstNameKana String?
  lastNameKana  String?
  role          String?
  groupId       ParliamentaryGroup?
  group         Group?              @relation(fields: [groupId], references: [id])
  house         House?
  win           Int?
  scannedCount  Int                 @default(0)
  description   String?             @db.Text()
  image         String?
  website       String?
  wikipedia     String?
  abstract      String?             @db.Text()
  twitter       String?
  facebook      String?
  youtube       String?
  instagram     String?
  feed          String?
  birthplace    String?
  school        String?
  birthday      DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  supporters    BillSupport[]
  timelines     Timeline[]
  annotations   Annotation[]

  @@index([groupId])
}

model Timeline {
  id              String  @id @default(cuid())
  title           String  @db.Text()
  link            String  @db.Text()
  isoDate         String?
  contentSnippet  String? @db.Text()
  dateMiliSeconds BigInt
  ogImageURL      String? @db.Text()
  member          Member  @relation(fields: [memberId], references: [id])
  memberId        String

  @@index([memberId])
}

model Bill {
  id             String        @id @default(cuid())
  reason         String        @db.Text()
  name           String
  bill_number    String
  category       BillCategory
  comments       Comment[]
  supportedBills BillSupport[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model BillSupport {
  id        String   @id @default(cuid())
  bill      Bill     @relation(fields: [billId], references: [id])
  billId    String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([billId, memberId])
  @@index([billId])
  @@index([memberId])
}

model Comment {
  comment   String      @db.Text
  id        String      @id @default(cuid())
  type      CommentType
  bill      Bill        @relation(fields: [billId], references: [id])
  billId    String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  votes     Vote[]

  @@index([billId])
  @@index([userId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(references: [id], fields: [commentId])
  commentId String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

enum CommentType {
  AGREEMENT
  NEUTRAL
  OPPOSITION
}

enum BillCategory {
  KAKUHOU
  SHUHOU
  SANHOU
}

enum House {
  REPRESENTATIVES
  COUNCILLORS
}

enum ParliamentaryGroup {
  JIMIN
  RIKKEN
  KOMEI
  KYOSAN
  ISHIN
  KOKUMIN
  REIWA
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  votes         Vote[]
  kids          Boolean @default(false)
  videoComments   VideoComment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           String       @id @default(cuid())
  m3u8_url     String       @unique
  page_url     String
  date         String
  house        House?
  summary      String?      @db.Text()
  meeting_name String
  kids         String?      @db.Text()
  annotations  Annotation[]
  meetingURL   String?
  apiURL       String?
  comments     VideoComment[]
}

model VideoComment {
  id       String  @id @default(cuid())
  content  String  @db.Text()
  video    Video   @relation(fields: [videoId], references: [id])
  videoId  String
  user     User    @relation(fields: [userId], references: [id])
  userId   String

  @@index([videoId])
  @@index([userId])
}


model Annotation {
  id           String  @id @default(cuid())
  speaker_name String
  video        Video   @relation(fields: [videoId], references: [m3u8_url]) // Add this line to define relation
  videoId      String
  start_sec    Float
  time         String
  end_sec      Float?
  speaker_info String
  member       Member? @relation(fields: [memberId], references: [id])
  memberId     String?

  @@index([videoId])
  @@index([memberId])
}
